//–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç ùëõ –ø–æ—Ç–æ–∫–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ö –≤—Å–µ—Ö
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—å—é—Ç–µ–∫—Å–∞ —Å –ø–æ–º–æ—â—å—é defer

package main

import (
	"fmt"
	"sync"
)

func main() {
	var counter int
	mu := sync.Mutex{}
	wg := sync.WaitGroup{}
	wg.Add(1000)
	ch := make(chan int, 1001)

	for i := 1; i < 1001; i++ {
		ch <- i

		go func(i int) {
			mu.Lock()
			defer wg.Done()
			defer mu.Unlock()
			counter += 1

		}(i)
		if i == 1000 {
			close(ch)
		}

	}

	wg.Wait()
	sum(ch)
	fmt.Println("–ß–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ —Ä–∞–≤–Ω–æ: ", counter)
}

func sum(ch chan int) {

	for val := range ch {
		fmt.Printf("–°–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–¥–∞–Ω—ã—Ö –≤ –∫–∞–Ω–∞–ª %d\n", val)
	}

}
