//Для закрепления навыков отложенного вызова функций, напишите программу,
//содержащую вызов функции, которая будет создавать паническую ситуацию неявно.
//Затем создайте отложенный вызов, который будет обрабатывать эту паническую ситуацию и,
//в частности, печатать предупреждение в консоль. Критерием успешного выполнения задания является то,
//что программа не завершается аварийно ни при каких условиях.
//Дополните функцию из п.1 возвратом собственной ошибки в случае возникновения панической ситуации.
//Собственная ошибка должна хранить время обнаружения панической ситуации. Критерием успешного
//выполнения задания является наличие обработки созданной ошибки в функции main и вывод ее состояния в консоль
package main

import (
	"fmt"
	"time"
)

func main() {
	slice := []int{0, 1, 2, 3, 4, 5}
	panicTime := time.Now()
	err1 := fmt.Errorf("Время обнаружения ошибки: %v ", panicTime) //собственная ошибка

	panica(slice, err1)

	fmt.Println("Критерием успешного выполнения задания является то,что программа не завершается аварийно ни при каких условиях.")
}

func panica(a []int, b error) {

	defer func() {
		if v := recover(); v != nil {
			fmt.Println("Паника,я тебя поймал!", v)
			fmt.Println(b)
		}

	}()

	fmt.Println("Длина слайса:", a[len(a)]) //Паника
}
